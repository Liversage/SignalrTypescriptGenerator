@using SignalrTypescriptGenerator
@using SignalrTypescriptGenerator.Models
@*Model is a TypesModel*@

// Hubs

interface SignalR {
	@foreach (TypeInfo typeInfo in Model.Hubs) {
	<text>@(typeInfo.Name): @(typeInfo.TypescriptType);</text>
	}
}

// Service contracts
@foreach (ServiceInfo serviceInfo in Model.ServiceContracts){
<text>
declare module @serviceInfo.ModuleName {

	interface @serviceInfo.InterfaceName {
		server : @Raw(serviceInfo.ServerTypeFullNamespace);
		client : @Raw(serviceInfo.ClientType);
	}

	interface @serviceInfo.ServerType {
		@foreach (FunctionDetails functionDetails in serviceInfo.ServerFunctions) {
		<text>@Raw(functionDetails.Name + functionDetails.Arguments): @Raw(functionDetails.ReturnType);</text>
		}
	}
}
</text>
}
// Clients
@foreach (ClientInfo clientInfo in Model.Clients) {
<text>
declare module @clientInfo.ModuleName {
	interface @clientInfo.InterfaceName {
		@foreach (FunctionDetails functionDetails in clientInfo.FunctionDetails) {
		<text>@Raw(functionDetails.Name): @Raw(functionDetails.Arguments) => void;</text>
		}
	}
}
</text>
}
// Data contracts
@foreach (DataContractInfo dataContractInfo in Model.DataContracts) {
<text>
declare module @dataContractInfo.ModuleName {
	interface @dataContractInfo.InterfaceName {
		@foreach (TypeInfo property in dataContractInfo.Properties) {
		<text>@Raw(property.Name.ToCamelCase()): @Raw(property.TypescriptType);</text>
		}
	}
}
</text>
}
// Enums
@foreach (EnumInfo enumInfo in Model.Enums) {
<text>
declare module @enumInfo.ModuleName {
	const enum @enumInfo.InterfaceName {
		@foreach (TypeInfo property in enumInfo.Properties) {
		<text>@Raw(property.Name) = @Raw(property.TypescriptType),</text>
		}
	}
}
</text>
}